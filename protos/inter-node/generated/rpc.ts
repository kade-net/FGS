/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: rpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./events";
import * as grpc_1 from "@grpc/grpc-js";
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedInterNodeServiceService {
    static definition = {
        SendMessageEvent: {
            path: "/InterNodeService/SendMessageEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.inter_node.MessageEvent) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.inter_node.MessageEvent.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.inter_node.AckEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.inter_node.AckEvent.deserialize(new Uint8Array(bytes))
        },
        SendInviteCreateEvent: {
            path: "/InterNodeService/SendInviteCreateEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.inter_node.InviteCreateEvent) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.inter_node.InviteCreateEvent.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.inter_node.AckEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.inter_node.AckEvent.deserialize(new Uint8Array(bytes))
        },
        SendInviteAcceptEvent: {
            path: "/InterNodeService/SendInviteAcceptEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.inter_node.InviteAcceptEvent) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.inter_node.InviteAcceptEvent.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.inter_node.AckEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.inter_node.AckEvent.deserialize(new Uint8Array(bytes))
        },
        SendInviteRejectEvent: {
            path: "/InterNodeService/SendInviteRejectEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.inter_node.InviteRejectEvent) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.inter_node.InviteRejectEvent.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.inter_node.AckEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.inter_node.AckEvent.deserialize(new Uint8Array(bytes))
        },
        SendRequestNodeChangeAuthorizationString: {
            path: "/InterNodeService/SendRequestNodeChangeAuthorizationString",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.inter_node.RequestNodeChangeAuthorizationString) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.inter_node.RequestNodeChangeAuthorizationString.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.inter_node.NodeChangeAuthorizationString) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.inter_node.NodeChangeAuthorizationString.deserialize(new Uint8Array(bytes))
        },
        SendChangeActiveNodeEvent: {
            path: "/InterNodeService/SendChangeActiveNodeEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.inter_node.ChangeActiveNodeEvent) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.inter_node.ChangeActiveNodeEvent.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.inter_node.AckEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.inter_node.AckEvent.deserialize(new Uint8Array(bytes))
        },
        DownloadMessageEventsToNewActiveNode: {
            path: "/InterNodeService/DownloadMessageEventsToNewActiveNode",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: dependency_1.inter_node.MessageDownloadRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.inter_node.MessageDownloadRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.inter_node.MessageEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.inter_node.MessageEvent.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SendMessageEvent(call: grpc_1.ServerUnaryCall<dependency_1.inter_node.MessageEvent, dependency_1.inter_node.AckEvent>, callback: grpc_1.sendUnaryData<dependency_1.inter_node.AckEvent>): void;
    abstract SendInviteCreateEvent(call: grpc_1.ServerUnaryCall<dependency_1.inter_node.InviteCreateEvent, dependency_1.inter_node.AckEvent>, callback: grpc_1.sendUnaryData<dependency_1.inter_node.AckEvent>): void;
    abstract SendInviteAcceptEvent(call: grpc_1.ServerUnaryCall<dependency_1.inter_node.InviteAcceptEvent, dependency_1.inter_node.AckEvent>, callback: grpc_1.sendUnaryData<dependency_1.inter_node.AckEvent>): void;
    abstract SendInviteRejectEvent(call: grpc_1.ServerUnaryCall<dependency_1.inter_node.InviteRejectEvent, dependency_1.inter_node.AckEvent>, callback: grpc_1.sendUnaryData<dependency_1.inter_node.AckEvent>): void;
    abstract SendRequestNodeChangeAuthorizationString(call: grpc_1.ServerUnaryCall<dependency_1.inter_node.RequestNodeChangeAuthorizationString, dependency_1.inter_node.NodeChangeAuthorizationString>, callback: grpc_1.sendUnaryData<dependency_1.inter_node.NodeChangeAuthorizationString>): void;
    abstract SendChangeActiveNodeEvent(call: grpc_1.ServerUnaryCall<dependency_1.inter_node.ChangeActiveNodeEvent, dependency_1.inter_node.AckEvent>, callback: grpc_1.sendUnaryData<dependency_1.inter_node.AckEvent>): void;
    abstract DownloadMessageEventsToNewActiveNode(call: grpc_1.ServerWritableStream<dependency_1.inter_node.MessageDownloadRequest, dependency_1.inter_node.MessageEvent>): void;
}
export class InterNodeServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedInterNodeServiceService.definition, "InterNodeService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    SendMessageEvent: GrpcUnaryServiceInterface<dependency_1.inter_node.MessageEvent, dependency_1.inter_node.AckEvent> = (message: dependency_1.inter_node.MessageEvent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, callback?: grpc_1.requestCallback<dependency_1.inter_node.AckEvent>): grpc_1.ClientUnaryCall => {
        return super.SendMessageEvent(message, metadata, options, callback);
    };
    SendInviteCreateEvent: GrpcUnaryServiceInterface<dependency_1.inter_node.InviteCreateEvent, dependency_1.inter_node.AckEvent> = (message: dependency_1.inter_node.InviteCreateEvent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, callback?: grpc_1.requestCallback<dependency_1.inter_node.AckEvent>): grpc_1.ClientUnaryCall => {
        return super.SendInviteCreateEvent(message, metadata, options, callback);
    };
    SendInviteAcceptEvent: GrpcUnaryServiceInterface<dependency_1.inter_node.InviteAcceptEvent, dependency_1.inter_node.AckEvent> = (message: dependency_1.inter_node.InviteAcceptEvent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, callback?: grpc_1.requestCallback<dependency_1.inter_node.AckEvent>): grpc_1.ClientUnaryCall => {
        return super.SendInviteAcceptEvent(message, metadata, options, callback);
    };
    SendInviteRejectEvent: GrpcUnaryServiceInterface<dependency_1.inter_node.InviteRejectEvent, dependency_1.inter_node.AckEvent> = (message: dependency_1.inter_node.InviteRejectEvent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, callback?: grpc_1.requestCallback<dependency_1.inter_node.AckEvent>): grpc_1.ClientUnaryCall => {
        return super.SendInviteRejectEvent(message, metadata, options, callback);
    };
    SendRequestNodeChangeAuthorizationString: GrpcUnaryServiceInterface<dependency_1.inter_node.RequestNodeChangeAuthorizationString, dependency_1.inter_node.NodeChangeAuthorizationString> = (message: dependency_1.inter_node.RequestNodeChangeAuthorizationString, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.NodeChangeAuthorizationString>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.NodeChangeAuthorizationString>, callback?: grpc_1.requestCallback<dependency_1.inter_node.NodeChangeAuthorizationString>): grpc_1.ClientUnaryCall => {
        return super.SendRequestNodeChangeAuthorizationString(message, metadata, options, callback);
    };
    SendChangeActiveNodeEvent: GrpcUnaryServiceInterface<dependency_1.inter_node.ChangeActiveNodeEvent, dependency_1.inter_node.AckEvent> = (message: dependency_1.inter_node.ChangeActiveNodeEvent, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.inter_node.AckEvent>, callback?: grpc_1.requestCallback<dependency_1.inter_node.AckEvent>): grpc_1.ClientUnaryCall => {
        return super.SendChangeActiveNodeEvent(message, metadata, options, callback);
    };
    DownloadMessageEventsToNewActiveNode: GrpcStreamServiceInterface<dependency_1.inter_node.MessageDownloadRequest, dependency_1.inter_node.MessageEvent> = (message: dependency_1.inter_node.MessageDownloadRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_1.inter_node.MessageEvent> => {
        return super.DownloadMessageEventsToNewActiveNode(message, metadata, options);
    };
}
