/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace inter_node {
    export enum AckType {
        MESSAGE = 0,
        INVITE_CREATE = 1,
        INVITE_ACCEPT = 2,
        INVITE_REJECT = 3,
        CHANGE_ACTIVE_NODE = 4
    }
    export class MessageEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            to?: string;
            conversationId?: string;
            encryptedContent?: string;
            timestamp?: number;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("conversationId" in data && data.conversationId != undefined) {
                    this.conversationId = data.conversationId;
                }
                if ("encryptedContent" in data && data.encryptedContent != undefined) {
                    this.encryptedContent = data.encryptedContent;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get conversationId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set conversationId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get encryptedContent() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set encryptedContent(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            to?: string;
            conversationId?: string;
            encryptedContent?: string;
            timestamp?: number;
            signature?: string;
        }): MessageEvent {
            const message = new MessageEvent({});
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.conversationId != null) {
                message.conversationId = data.conversationId;
            }
            if (data.encryptedContent != null) {
                message.encryptedContent = data.encryptedContent;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                to?: string;
                conversationId?: string;
                encryptedContent?: string;
                timestamp?: number;
                signature?: string;
            } = {};
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.conversationId != null) {
                data.conversationId = this.conversationId;
            }
            if (this.encryptedContent != null) {
                data.encryptedContent = this.encryptedContent;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.to.length)
                writer.writeString(1, this.to);
            if (this.conversationId.length)
                writer.writeString(2, this.conversationId);
            if (this.encryptedContent.length)
                writer.writeString(3, this.encryptedContent);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (this.signature.length)
                writer.writeString(5, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.to = reader.readString();
                        break;
                    case 2:
                        message.conversationId = reader.readString();
                        break;
                    case 3:
                        message.encryptedContent = reader.readString();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    case 5:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageEvent {
            return MessageEvent.deserialize(bytes);
        }
    }
    export class InviteCreateEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            to?: string;
            from?: string;
            encryptedConversationId?: string;
            timestamp?: number;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("encryptedConversationId" in data && data.encryptedConversationId != undefined) {
                    this.encryptedConversationId = data.encryptedConversationId;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get encryptedConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set encryptedConversationId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            to?: string;
            from?: string;
            encryptedConversationId?: string;
            timestamp?: number;
            signature?: string;
        }): InviteCreateEvent {
            const message = new InviteCreateEvent({});
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.encryptedConversationId != null) {
                message.encryptedConversationId = data.encryptedConversationId;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                to?: string;
                from?: string;
                encryptedConversationId?: string;
                timestamp?: number;
                signature?: string;
            } = {};
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.encryptedConversationId != null) {
                data.encryptedConversationId = this.encryptedConversationId;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.to.length)
                writer.writeString(1, this.to);
            if (this.from.length)
                writer.writeString(2, this.from);
            if (this.encryptedConversationId.length)
                writer.writeString(3, this.encryptedConversationId);
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (this.signature.length)
                writer.writeString(5, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteCreateEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteCreateEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.to = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        message.encryptedConversationId = reader.readString();
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    case 5:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteCreateEvent {
            return InviteCreateEvent.deserialize(bytes);
        }
    }
    export class InviteAcceptEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            to?: string;
            encryptedConversationId?: string;
            timestamp?: number;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("encryptedConversationId" in data && data.encryptedConversationId != undefined) {
                    this.encryptedConversationId = data.encryptedConversationId;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get encryptedConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set encryptedConversationId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            to?: string;
            encryptedConversationId?: string;
            timestamp?: number;
            signature?: string;
        }): InviteAcceptEvent {
            const message = new InviteAcceptEvent({});
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.encryptedConversationId != null) {
                message.encryptedConversationId = data.encryptedConversationId;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                to?: string;
                encryptedConversationId?: string;
                timestamp?: number;
                signature?: string;
            } = {};
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.encryptedConversationId != null) {
                data.encryptedConversationId = this.encryptedConversationId;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.to.length)
                writer.writeString(1, this.to);
            if (this.encryptedConversationId.length)
                writer.writeString(2, this.encryptedConversationId);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.signature.length)
                writer.writeString(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteAcceptEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteAcceptEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.to = reader.readString();
                        break;
                    case 2:
                        message.encryptedConversationId = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteAcceptEvent {
            return InviteAcceptEvent.deserialize(bytes);
        }
    }
    export class InviteRejectEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            to?: string;
            encryptedConversationId?: string;
            timestamp?: number;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("encryptedConversationId" in data && data.encryptedConversationId != undefined) {
                    this.encryptedConversationId = data.encryptedConversationId;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get encryptedConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set encryptedConversationId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            to?: string;
            encryptedConversationId?: string;
            timestamp?: number;
            signature?: string;
        }): InviteRejectEvent {
            const message = new InviteRejectEvent({});
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.encryptedConversationId != null) {
                message.encryptedConversationId = data.encryptedConversationId;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                to?: string;
                encryptedConversationId?: string;
                timestamp?: number;
                signature?: string;
            } = {};
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.encryptedConversationId != null) {
                data.encryptedConversationId = this.encryptedConversationId;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.to.length)
                writer.writeString(1, this.to);
            if (this.encryptedConversationId.length)
                writer.writeString(2, this.encryptedConversationId);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.signature.length)
                writer.writeString(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteRejectEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteRejectEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.to = reader.readString();
                        break;
                    case 2:
                        message.encryptedConversationId = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteRejectEvent {
            return InviteRejectEvent.deserialize(bytes);
        }
    }
    export class RequestNodeChangeAuthorizationString extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            timestamp?: number;
            newNodeNamespace?: string;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("newNodeNamespace" in data && data.newNodeNamespace != undefined) {
                    this.newNodeNamespace = data.newNodeNamespace;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get newNodeNamespace() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set newNodeNamespace(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            address?: string;
            timestamp?: number;
            newNodeNamespace?: string;
            signature?: string;
        }): RequestNodeChangeAuthorizationString {
            const message = new RequestNodeChangeAuthorizationString({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.newNodeNamespace != null) {
                message.newNodeNamespace = data.newNodeNamespace;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                timestamp?: number;
                newNodeNamespace?: string;
                signature?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.newNodeNamespace != null) {
                data.newNodeNamespace = this.newNodeNamespace;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.timestamp != 0)
                writer.writeInt64(2, this.timestamp);
            if (this.newNodeNamespace.length)
                writer.writeString(3, this.newNodeNamespace);
            if (this.signature.length)
                writer.writeString(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestNodeChangeAuthorizationString {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestNodeChangeAuthorizationString();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readInt64();
                        break;
                    case 3:
                        message.newNodeNamespace = reader.readString();
                        break;
                    case 4:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestNodeChangeAuthorizationString {
            return RequestNodeChangeAuthorizationString.deserialize(bytes);
        }
    }
    export class NodeChangeAuthorizationString extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            timestamp?: number;
            authorizationRequestString?: string;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("authorizationRequestString" in data && data.authorizationRequestString != undefined) {
                    this.authorizationRequestString = data.authorizationRequestString;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get authorizationRequestString() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set authorizationRequestString(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            address?: string;
            timestamp?: number;
            authorizationRequestString?: string;
            signature?: string;
        }): NodeChangeAuthorizationString {
            const message = new NodeChangeAuthorizationString({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.authorizationRequestString != null) {
                message.authorizationRequestString = data.authorizationRequestString;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                timestamp?: number;
                authorizationRequestString?: string;
                signature?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.authorizationRequestString != null) {
                data.authorizationRequestString = this.authorizationRequestString;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.timestamp != 0)
                writer.writeInt64(2, this.timestamp);
            if (this.authorizationRequestString.length)
                writer.writeString(3, this.authorizationRequestString);
            if (this.signature.length)
                writer.writeString(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeChangeAuthorizationString {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeChangeAuthorizationString();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readInt64();
                        break;
                    case 3:
                        message.authorizationRequestString = reader.readString();
                        break;
                    case 4:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NodeChangeAuthorizationString {
            return NodeChangeAuthorizationString.deserialize(bytes);
        }
    }
    export class ChangeActiveNodeEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            timestamp?: number;
            userAuthorizationString?: string;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("userAuthorizationString" in data && data.userAuthorizationString != undefined) {
                    this.userAuthorizationString = data.userAuthorizationString;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get userAuthorizationString() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userAuthorizationString(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            address?: string;
            timestamp?: number;
            userAuthorizationString?: string;
            signature?: string;
        }): ChangeActiveNodeEvent {
            const message = new ChangeActiveNodeEvent({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.userAuthorizationString != null) {
                message.userAuthorizationString = data.userAuthorizationString;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                timestamp?: number;
                userAuthorizationString?: string;
                signature?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.userAuthorizationString != null) {
                data.userAuthorizationString = this.userAuthorizationString;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.userAuthorizationString.length)
                writer.writeString(4, this.userAuthorizationString);
            if (this.signature.length)
                writer.writeString(5, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeActiveNodeEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeActiveNodeEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        message.userAuthorizationString = reader.readString();
                        break;
                    case 5:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeActiveNodeEvent {
            return ChangeActiveNodeEvent.deserialize(bytes);
        }
    }
    export class AckEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            node?: string;
            ackType?: AckType;
            timestamp?: number;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("node" in data && data.node != undefined) {
                    this.node = data.node;
                }
                if ("ackType" in data && data.ackType != undefined) {
                    this.ackType = data.ackType;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get node() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set node(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ackType() {
            return pb_1.Message.getFieldWithDefault(this, 2, AckType.MESSAGE) as AckType;
        }
        set ackType(value: AckType) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            node?: string;
            ackType?: AckType;
            timestamp?: number;
            signature?: string;
        }): AckEvent {
            const message = new AckEvent({});
            if (data.node != null) {
                message.node = data.node;
            }
            if (data.ackType != null) {
                message.ackType = data.ackType;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                node?: string;
                ackType?: AckType;
                timestamp?: number;
                signature?: string;
            } = {};
            if (this.node != null) {
                data.node = this.node;
            }
            if (this.ackType != null) {
                data.ackType = this.ackType;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.node.length)
                writer.writeString(1, this.node);
            if (this.ackType != AckType.MESSAGE)
                writer.writeEnum(2, this.ackType);
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.signature.length)
                writer.writeString(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AckEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AckEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.node = reader.readString();
                        break;
                    case 2:
                        message.ackType = reader.readEnum();
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AckEvent {
            return AckEvent.deserialize(bytes);
        }
    }
    export class MessageDownloadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: string;
            node?: string;
            userAddress?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("node" in data && data.node != undefined) {
                    this.node = data.node;
                }
                if ("userAddress" in data && data.userAddress != undefined) {
                    this.userAddress = data.userAddress;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get node() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set node(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userAddress() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userAddress(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            signature?: string;
            node?: string;
            userAddress?: string;
        }): MessageDownloadRequest {
            const message = new MessageDownloadRequest({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.node != null) {
                message.node = data.node;
            }
            if (data.userAddress != null) {
                message.userAddress = data.userAddress;
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: string;
                node?: string;
                userAddress?: string;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.node != null) {
                data.node = this.node;
            }
            if (this.userAddress != null) {
                data.userAddress = this.userAddress;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeString(1, this.signature);
            if (this.node.length)
                writer.writeString(2, this.node);
            if (this.userAddress.length)
                writer.writeString(3, this.userAddress);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageDownloadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageDownloadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readString();
                        break;
                    case 2:
                        message.node = reader.readString();
                        break;
                    case 3:
                        message.userAddress = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageDownloadRequest {
            return MessageDownloadRequest.deserialize(bytes);
        }
    }
}
